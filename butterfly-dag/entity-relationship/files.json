[
  {
    "filename": "data.js",
    "code": "import BaseNode from './node';\nimport BaseEdge from './edge';\n\nexport default {\n  nodes: [{\n    id: '1',\n    text: 'Gets Paid',\n    top: 175,\n    left: 600,\n    shape: 'diamond',\n    Class: BaseNode,\n    width: 128,\n    height: 61,\n    fill: '#776ef3',\n    rectDasharray: 'none'\n  }, {\n    id: '2',\n    text: 'Employee',\n    top: 185,\n    left: 300,\n    color: 'box-background-color',\n    shape: 'rect',\n    Class: BaseNode,\n  }, {\n    id: '3',\n    text: 'Number',\n    top: 90,\n    left: 200,\n    color: 'box-background-color',\n    shape: 'ellipse',\n    Class: BaseNode,\n  }, {\n    id: '4',\n    text: 'Name',\n    top: 30,\n    left: 325,\n    color: 'box-background-color',\n    shape: 'ellipse',\n    Class: BaseNode,\n  }, {\n    id: '5',\n    text: 'Skills',\n    top: 90,\n    left: 450,\n    width: 95,\n    height: 45,\n    color: 'box-background-color',\n    shape: 'ellipse',\n    Class: BaseNode,\n    // fill: '#FFA940',\n    // ellipseBorderWidth: 2,\n    // ellipseDasharray: 'none'\n  }\n  , {\n    id: '6',\n    text: 'ISA',\n    top: 280,\n    left: 320,\n    width: 100,\n    height: 50,\n    shape: 'triangle',\n    fill: '#fff',\n    Class: BaseNode,\n  }, {\n    id: '7',\n    text: 'Salesman',\n    top: 370,\n    left: 300,\n    color: 'box-background-color',\n    shape: 'rect',\n    Class: BaseNode,\n  }, {\n    id: '8',\n    text: 'Uses',\n    top: 360,\n    left: 600,\n    shape: 'diamond',\n    Class: BaseNode,\n    width: 70,\n    height: 70,\n    fill: '#797d9a',\n  }, {\n    id: '9',\n    text: 'Company car',\n    top: 370,\n    left: 900,\n    color: 'box-background-color',\n    shape: 'rect',\n    Class: BaseNode,\n  }, {\n    id: '10',\n    text: 'Plate',\n    top: 370,\n    left: 1100,\n    color: 'box-background-color',\n    shape: 'ellipse',\n    Class: BaseNode,\n  },\n  {\n    id: '11',\n    text: 'Wage',\n    top: 185,\n    left: 900,\n    color: 'box-background-color',\n    shape: 'rect',\n    Class: BaseNode,\n    width: 137,\n    height: 42,\n    fill: '#31d0c6',\n    rectDasharray: 'none'\n  }, {\n    id: '12',\n    text: 'Amount',\n    top: 90,\n    left: 1040,\n    width: 95,\n    height: 45,\n    color: 'box-background-color',\n    shape: 'ellipse',\n    Class: BaseNode,\n  }, {\n    id: '13',\n    text: 'Date',\n    top: 90,\n    left: 810,\n    color: 'box-background-color',\n    shape: 'ellipse',\n    Class: BaseNode,\n  }\n  ],\n  edges: [{\n    source: '1',\n    target: '2',\n    type: 'node',\n    label: '1',\n    Class: BaseEdge\n  },\n  {\n    source: '2',\n    target: '3',\n    type: 'node',\n    Class: BaseEdge\n  }, {\n    source: '2',\n    target: '4',\n    type: 'node',\n    Class: BaseEdge\n  }, {\n    source: '2',\n    target: '5',\n    type: 'node',\n    Class: BaseEdge\n  }, {\n    source: '2',\n    target: '6',\n    type: 'node',\n    Class: BaseEdge\n  }, {\n    source: '6',\n    target: '7',\n    type: 'node',\n    Class: BaseEdge\n  }, {\n    source: '7',\n    target: '8',\n    type: 'node',\n    label: '0..1',\n    Class: BaseEdge\n  }, {\n    source: '8',\n    target: '9',\n    type: 'node',\n    label: '1..1',\n    Class: BaseEdge\n  }, {\n    source: '9',\n    target: '10',\n    type: 'node',\n    Class: BaseEdge\n  }, {\n    source: '1',\n    target: '11',\n    type: 'node',\n    label: 'N',\n    Class: BaseEdge\n  }, {\n    source: '11',\n    target: '12',\n    type: 'node',\n    Class: BaseEdge\n  }, {\n    source: '11',\n    target: '13',\n    type: 'node',\n    Class: BaseEdge\n  },\n  ],\n  groupd: []\n};\n"
  },
  {
    "filename": "edge.js",
    "code": "import $ from 'jquery';\nimport {Edge} from 'butterfly-dag';\n\nclass BaseEdge extends Edge {\n  draw(obj) {\n    let path = super.draw(obj);\n    if (this.options.color) {\n      $(path).addClass(this.options.color);\n    }\n    return path;\n  }\n  drawArrow(isShow) {\n    let dom = super.drawArrow(isShow);\n    if (this.options.color) {\n      $(dom).addClass(this.options.color);\n    }\n    return dom;\n  }\n\n  drawLabel(text) {\n    let dom = null;\n    if (text) {\n      dom = $(`<span class=\"label\">${text}</span>`)[0];\n    }\n    return dom;\n  }\n}\n\nexport default BaseEdge;\n"
  },
  {
    "filename": "index.jsx",
    "code": "import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport {Canvas} from 'butterfly-dag';\n\nimport mockData from './data.js';\n\nimport './index.less';\nimport 'butterfly-dag/dist/index.css';\n\nclass Entity extends Component {\n  componentDidMount() {\n    let root = document.getElementById('dag-canvas');\n    this.canvas = new Canvas({\n      root: root,\n      disLinkable: true, // 可删除连线\n      linkable: true,    // 可连线\n      draggable: true,   // 可拖动\n      zoomable: true,    // 可放大\n      moveable: true,    // 可平移\n      theme: {\n        edge: {\n          shapeType: 'Straight',\n          arrow: true\n        }\n      }\n    });\n    this.canvas.draw(mockData);\n  }\n\n  render() {\n    return (\n      <div className='entity-page'>\n        <div className=\"entity-canvas\" id=\"dag-canvas\">\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Entity />, document.getElementById('root'));\n"
  },
  {
    "filename": "index.less",
    "code": "@import 'theme.less'; \n\n\n.entity-page {\n  width: 100%;\n  height: 100%;\n\n  .entity-canvas {\n    width: 100%;\n    height: 100%;\n  }\n\n  .entity-base-node {\n    position: absolute;\n    text-align: center;\n    background: @butterfly-theme-color;\n    vertical-align: middle;\n    border-radius: 5px;\n    line-height: 3;\n    border: @butterfly-box-border;\n  }\n\n  .butterflies-link {\n    stroke-width: 1px;\n  }\n  .box-background-color{\n    background-color: @butterfly-primary-color;\n    fill:#f00;\n    stroke: aqua;\n  }\n\n  .circle {\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n  }\n\n  .diamond {\n    .text {\n      font-size: 14px;\n      color: @butterfly-normal-font-color;\n      text-align: center;\n    }\n    width: 70px;\n    height: 70px;\n    transform: rotate(45deg);\n    border-radius: 0px;\n    line-height: 5;\n    background-color: @butterfly-theme-color;\n    .rotate {\n      transform: rotate(-45deg) translateX(-3%) translateY(-72%);\n    }\n   \n  }\n  \n  .rect {\n    width: 137px;\n    height: 42px;\n    border-radius: 6px;\n  }\n\n  .transparent {\n    background: transparent;\n  }\n\n  .ellipse {\n    border-radius: 50%;\n    height: 42px;\n    width: 82px;\n  }\n\n  .ellipse-border {\n    border-radius: 50%;\n    height: 45px;\n    width: 95px;\n  }\n\n  .triangle {\n    width: 100px;\n    height: 50px;\n    background-color: transparent;\n    fill: @butterfly-theme-color;\n    stroke: @butterfly-box-border-color-base;\n    border:none;\n    stroke-width:1\n  }\n\n  .dashed {\n    border-style: dashed;\n  }\n\n  .solid {\n    border-style: solid;\n  }\n\n  .text {\n    color: @butterfly-overlay-font-color;\n    display: inline-block;\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n    -webkit-box-pack: center;\n    overflow: hidden;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n  }\n\n  .triangle-text {\n    font-size: 14px;\n    top: 40%;\n    color: @butterfly-normal-font-color;\n  }\n\n  .label {\n    position: absolute;\n    width: 38px;\n    height: 22px;\n    background: @butterfly-theme-color;\n    text-align: center;\n    border-radius: 100px;\n  }\n}"
  },
  {
    "filename": "node.js",
    "code": "import $ from 'jquery';\nimport {Node} from 'butterfly-dag';\n\nclass BaseNode extends Node {\n  draw = (data) => {\n    let container = $('<div class=\"entity-base-node\"></div>')\n      .css('top', data.top)\n      .css('left', data.left)\n      .attr('id', data.id);\n\n    // 添加颜色\n    if (data.options.color) {\n      container.addClass(data.options.color);\n    }\n\n    // 渲染外形\n    container.addClass(data.options.shape);\n\n    // 有外边框的椭圆\n    if (data.options.ellipseBorderWidth) {\n      const width = data.options.width / 2;\n      const height = data.options.height / 2;\n      const strokeWidth = data.options.ellipseBorderWidth;\n      const fill = data.options.fill;\n      let ellipseSvg = $(`\n        <svg width=\"100%\" height=\"100%\">\n          <ellipse cx=\"${width}\" cy=\"${height}\" rx=\"${width - 2}\" ry=\"${height - 2}\" style=\"fill:#fff;\n                  stroke:${fill};stroke-width:${strokeWidth}; stroke-dasharray:${data.options.ellipseDasharray}\" />\n          <ellipse cx=\"${width}\" cy=\"${height}\" rx=\"${width - 4 - strokeWidth}\" ry=\"${height - 3 - strokeWidth}\" style=\"fill:${fill}\" />\n        </svg>`);\n      container.append(ellipseSvg);\n      container.addClass('transparent');\n    }\n\n    // 有边框的rect\n    if (data.options.rectBorderWidth) {\n      const width = data.options.width;\n      const height = data.options.height;\n      const strokeWidth = data.options.rectBorderWidth;\n      const fill = data.options.fill;\n      let diamondSvg = $(`\n        <svg width=\"100%\" height=\"100%\">\n          <rect x=\"${strokeWidth}\" y=\"${strokeWidth}\" width=\"${width - strokeWidth * 2}\" height=\"${height - strokeWidth * 2}\" style=\"fill:#fff;\n                          stroke:${fill};stroke-width:${strokeWidth}\" />\n          <rect x=\"${strokeWidth + 3}\" y=\"${strokeWidth + 3}\" width=\"${width - strokeWidth * 2 - 6}\" height=\"${height - strokeWidth * 2 - 6}\" style=\"fill:${fill}\" />\n        </svg>`);\n      container.append(diamondSvg);\n      container.addClass('transparent');\n    }\n\n    // 三角形\n    if (data.options.shape === 'triangle') {\n      const width = data.options.width;\n      const height = data.options.height;\n      let triangleSvg = $(`\n        <svg width=\"100%\" height=\"100%\">\n          <polygon points=\"0,0 ${width},0 ${width / 2},${height}\"\n          />\n        </svg>`);\n      container.append(triangleSvg);\n    }\n\n    // 添加文字\n    let textSpan = $(`<span class='text'>${data.options.text}</span>`);\n    if (data.options.shape === 'diamond') {\n      textSpan.addClass('rotate');\n    }\n    if (data.options.shape === 'triangle') {\n      textSpan.addClass('triangle-text');\n    }\n    container.append(textSpan);\n\n    return container[0];\n  }\n}\n\nexport default BaseNode;\n"
  },
  {
    "filename": "package.json",
    "code": "{\n  \"name\": \"entity-relationship\",\n  \"cn_name\": \"实体关系图\",\n  \"description\": \"a dag to show relationship between entities\",\n  \"cn_description\": \"用于描述实体关系之间的DAG图\",\n  \"dependencies\": {\n    \"butterfly-dag\": \"*\",\n    \"react\": \"^16.0.0\",\n    \"react-dom\": \"^16.0.0\",\n    \"jquery\": \"*\",\n    \"lodash\": \"*\",\n    \"antd\": \"^3.0.0\"\n  }\n}"
  },
  {
    "filename": "theme.less",
    "code": "@butterfly-theme-color-base:#fff;\n@butterfly-normal-font-color-base:#222;;\n@butterfly-overlay-font-color-base:#FFF;\n@butterfly-primary-color-base:#F66902;\n@butterfly-box-border-color-base: #D9D9D9;\n@butterfly-box-shadow-base:0 2px 3px 0 rgba(0,112,204,0.06);\n@butterfly-box-radius-base:100px;\n@butterfly-line-color-base: #BFBFBF;\n// 主题背景色（画布背景色）\n@butterfly-theme-background-color: @butterfly-theme-color-base;\n// （各图形框）普通情况背景色\n@butterfly-theme-color: fade(@butterfly-theme-color-base,80%);\n// 主题色\n@butterfly-primary-color: @butterfly-primary-color-base;\n// 普通情况下字体颜色\n@butterfly-normal-font-color: @butterfly-normal-font-color-base;\n// 主题背景色上的字体颜色及icon颜色\n@butterfly-overlay-font-color: @butterfly-overlay-font-color-base;\n// 拖动时的背景色\n@butterfly-box-move-background-color: fade(@butterfly-primary-color, 20%);\n// 边框的样式\n@butterfly-box-border: 1px solid @butterfly-box-border-color-base;\n@butterfly-box-shadow: @butterfly-box-shadow-base;\n@butterfly-box-radius: @butterfly-box-radius-base;\n@butterfly-box-node-border-hover: 1px solid @butterfly-primary-color;\n// 线条样式\n@butterfly-line-color: @butterfly-line-color-base;"
  }
]