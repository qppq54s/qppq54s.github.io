[
  {
    "filename": "base_node.js",
    "code": "import $ from 'jquery';\nimport {Node} from 'butterfly-dag';\n\nimport './base_node.less';\n\nclass BaseNode extends Node {\n  constructor(opts) {\n    super(opts);\n    this.options = opts;\n  }\n\n  draw = (opts) => {\n    let container = $('<div class=\"relation-node\"></div>')\n      .css('top', opts.top)\n      .css('left', opts.left)\n      .attr('id', opts.id)\n      .addClass(opts.options.className);\n\n    let logoContainer = $(`<div class=\"logo-container\">${opts.options.name}</div>`);\n    logoContainer.addClass(opts.options.className);\n\n    container.append(logoContainer);\n\n    return container[0];\n  }\n}\n\nexport default BaseNode;\n"
  },
  {
    "filename": "base_node.less",
    "code": "@import 'theme.less'; \n\n\n.dagreLayout-page {\n  .relation-node {\n    position: absolute;\n    width: 140px;\n    height: 36px;\n    padding: 0;\n    box-shadow:@butterfly-box-shadow;\n    border-radius: @butterfly-box-radius;\n    border:@butterfly-box-border;\n    cursor: pointer;\n    &:hover {\n      border: @butterfly-box-node-border-hover;\n      .datac-icon {\n        line-height: 52px;\n      }\n    }\n    .logo-container { \n      width: 100%;\n      height: 100%;\n      border: none;\n      line-height: 36px;\n      text-align: center;\n      margin: auto;\n      display: inherit;\n      background: none;\n    }\n  }\n\n  .datac-icon {\n    font-size: 35px;\n    line-height: 60px;\n  }\n  .long-text {\n    text-align: center;\n  }\n  .nodeBackground-color{\n    background-color: @butterfly-theme-color;\n  }\n}"
  },
  {
    "filename": "dagre-canvas.js",
    "code": "import _ from 'lodash';\nimport {Canvas, Layout} from 'butterfly-dag';\n\nclass DagreCanvas extends Canvas {\n  drageReDraw(newParam) {\n    let {nodes, layout, edges} = this;\n    let addResultNodes = nodes.map((item) => {\n      return item.options;\n    });\n    if (newParam) {\n      layout.options = {\n        ...layout.options,\n        ...newParam\n      };\n    }\n    Layout.dagreLayout({\n      rankdir: (newParam && newParam.rankdir) || _.get(layout, 'options.rankdir') || 'TB',\n      align: (newParam && newParam.align) || _.get(layout, 'options.align'),\n      nodeSize: (newParam && newParam.nodeSize) || _.get(layout, 'options.nodeSize'),\n      nodesepFunc: (newParam && newParam.nodesepFunc) || _.get(layout, 'options.nodesepFunc'),\n      ranksepFunc: (newParam && newParam.ranksepFunc) || _.get(layout, 'options.ranksepFunc'),\n      nodesep: (newParam && newParam.nodesep) || _.get(layout, 'options.nodesep') || 50,\n      ranksep: (newParam && newParam.ranksep) || _.get(layout, 'options.ranksep') || 50,\n      controlPoints: (newParam && newParam.controlPoints) || _.get(layout, 'options.controlPoints') || false,\n      data: {\n        nodes: addResultNodes,\n        edges: edges.map(item => ({\n          source: item.sourceNode.id,\n          target: item.targetNode.id\n        }))\n      }});\n    // 布局计算完位置后left和top赋值给node节点\n    nodes.forEach((item, index) => {\n      let currentNodeNewLeft = addResultNodes[index].left;\n      let currentNodeNewTop = addResultNodes[index].top;\n      let currentNodeNewPosInfo = addResultNodes[index].posInfo;\n      if (item.top !== currentNodeNewTop || item.left !== currentNodeNewLeft) {\n        item.options.top = currentNodeNewTop;\n        item.options.left = currentNodeNewLeft;\n        item.options.posInfo = currentNodeNewPosInfo;\n        item.moveTo(currentNodeNewLeft, currentNodeNewTop);\n      }\n    });\n  }\n}\n\nexport default DagreCanvas;\n"
  },
  {
    "filename": "data.js",
    "code": "import node from './base_node';\n\nexport default {\n  nodes: [{\n    id: 'test1',\n    name: 'test1',\n    Class: node,\n    className: 'nodeBackground-color'\n  },\n  {\n    id: 'test2',\n    name: 'test2',\n    Class: node,\n    className: 'nodeBackground-color'\n  }, {\n    id: 'test3',\n    name: 'test3',\n    Class: node,\n    className: 'nodeBackground-color'\n  }, {\n    id: 'test4',\n    name: 'test4',\n    Class: node,\n    className: 'nodeBackground-color'\n  }, {\n    id: 'test5',\n    name: 'test5',\n    Class: node,\n    className: 'nodeBackground-color'\n  }, {\n    id: 'test6',\n    name: 'test6',\n    Class: node,\n    className: 'nodeBackground-color'\n  }, {\n    id: 'test7',\n    name: 'test7',\n    Class: node,\n    className: 'nodeBackground-color'\n  }\n  ],\n  edges: [{\n    source: 'test1',\n    target: 'test2',\n  },\n  {\n    source: 'test1',\n    target: 'test3'\n  }, {\n    source: 'test2',\n    target: 'test4'\n  }, {\n    source: 'test3',\n    target: 'test4'\n  }, {\n    source: 'test4',\n    target: 'test5'\n  }, {\n    source: 'test4',\n    target: 'test6'\n  },\n  {\n    source: 'test4',\n    target: 'test7'\n  }\n  ]\n};\n\n"
  },
  {
    "filename": "edge.js",
    "code": "import $ from 'jquery';\nimport {Edge} from 'butterfly-dag';\n\nclass RelationEdge extends Edge {\n  draw(obj) {\n    let path = super.draw(obj);\n    if (this.options.color) {\n      $(path).addClass(this.options.color);\n    }\n    return path;\n  }\n\n  drawArrow(isShow) {\n    let dom = super.drawArrow(isShow);\n    if (this.options.color) {\n      $(dom).addClass(this.options.color);\n    }\n    return dom;\n  }\n\n  drawLabel(text) {\n    let dom = null;\n    if (text) {\n      dom = $(`<span class=\"butterflies-label\">${text}</span>`)[0];\n    }\n    return dom;\n  }\n}\n\nexport default RelationEdge;\n"
  },
  {
    "filename": "edge_relation.jsx",
    "code": "import $ from 'jquery';\nimport {Edge} from 'butterfly-dag';\n\nclass RelationEdge extends Edge {\n  draw(obj) {\n    let path = super.draw(obj);\n    if (this.options.color) {\n      $(path).addClass(this.options.color);\n    }\n    return path;\n  }\n  drawArrow(isShow) {\n    let dom = super.drawArrow(isShow);\n    if (this.options.color) {\n      $(dom).addClass(this.options.color);\n    }\n    return dom;\n  }\n  drawLabel(text) {\n    let dom = null;\n    if (text) {\n      dom = $(`<span class=\"butterflies-label\">${text}</span>`)[0];\n    }\n    return dom;\n  }\n};\n\nexport default RelationEdge;\n"
  },
  {
    "filename": "index.jsx",
    "code": "import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport {Button, Select, Slider} from 'antd';\n\nimport mockData from './data';\nimport node from './base_node';\nimport RelationEdge from './edge';\nimport DagreCanvas from './dagre-canvas';\n\nimport './index.less';\nimport 'antd/dist/antd.css';\nimport 'butterfly-dag/dist/index.css';\n\nconst Option = Select.Option;\nclass DagreLayout extends Component {\n  constructor() {\n    super();\n    this.canvas = null;\n    this.state = {\n      addNodesStatus: true\n    };\n  }\n\n  componentDidMount() {\n    let root = document.getElementById('dag-canvas');\n    this.canvas = new DagreCanvas({\n      root: root,\n      disLinkable: true, // 可删除连线\n      linkable: true,    // 可连线\n      draggable: true,   // 可拖动\n      zoomable: true,    // 可放大\n      moveable: true,    // 可平移\n      layout: {\n        type: 'dagreLayout',\n        options: {\n          rankdir: 'TB',\n          nodesep: 40,\n          ranksep: 40,\n          controlPoints: false,\n        },\n      },\n      theme: {\n        edge: {\n          shapeType: 'AdvancedBezier',\n          arrow: true,\n          arrowPosition: 0.5,\n          Class: RelationEdge\n        }\n      }\n    });\n    this.canvas.draw(mockData);\n  }\n\n  // 添加节点\n  addNodes = () => {\n    if (!this.state.addNodesStatus) {\n      return;\n    }\n    this.canvas.addNodes([\n      {\n        id: 'test8',\n        name: 'test8',\n        Class: node,\n        color: '#c6e5ff'\n      },\n      {\n        id: 'test9',\n        name: 'test9',\n        Class: node,\n        color: '#c6e5ff'\n      }\n    ]);\n    this.canvas.addEdges([\n      {\n        source: 'test4',\n        target: 'test8',\n      },\n      {\n        source: 'test4',\n        target: 'test9',\n      },\n    ]);\n    this.canvas.drageReDraw();\n    this.setState({\n      addNodesStatus: false\n    });\n  }\n\n  // 删除节点\n  removeNodes = () => {\n    this.canvas.removeNodes(['test8', 'test9']);\n    this.canvas.removeEdges([\n      {\n        source: 'test4',\n        target: 'test8',\n      },\n      {\n        source: 'test4',\n        target: 'test9',\n      },\n    ]);\n    this.canvas.drageReDraw();\n    this.setState({\n      addNodesStatus: true\n    });\n  }\n\n  // 配置项改变\n  optionsChange(key, value) {\n    let oldOptions = this.canvas.layout.options;\n    let newOptions = {...oldOptions, [key]: value};\n    this.canvas.drageReDraw(newOptions);\n  }\n\n  render() {\n    return (\n      <div className='dagreLayout-page'>\n        <div className='operate-bar'>\n          <div className='operate-bar-title'>属性配置</div>\n          <div className='operate-item'>\n            <div className='operate-node'>增删节点:</div>\n            <Button onClick = {this.addNodes}>添加节点</Button>\n            <Button onClick = {this.removeNodes}>删除节点</Button>\n          </div>\n          <div className='operate-item'>\n            <div className='operate-rankdir'>布局方向:</div>\n            <Select defaultValue=\"TB\" style={{width: 120}} onChange={this.optionsChange.bind(this, 'rankdir')}>\n              <Option value=\"TB\">TB</Option>\n              <Option value=\"BT\">BT</Option>\n              <Option value=\"LR\">LR</Option>\n              <Option value=\"RL\">RL</Option>\n            </Select>\n          </div>\n          <div className='operate-item'>\n            <div className='operate-align'>对齐方向:</div>\n            <Select defaultValue='默认' style={{width: 120}} onChange={this.optionsChange.bind(this, 'align')}>\n              <Option value={undefined}>默认</Option>\n              <Option value=\"UL\">UL</Option>\n              <Option value=\"UR\">UR</Option>\n              <Option value=\"DL\">DL</Option>\n              <Option value=\"DR\">DR</Option>\n            </Select>\n          </div>\n          <div className='operate-item'>\n            <div className='operate-nodesep'>水平间距:</div>\n            <Slider defaultValue={40} onAfterChange = {this.optionsChange.bind(this, 'nodesep')} />\n          </div>\n          <div className='operate-item'>\n            <div className='operate-ranksep'>层间距:</div>\n            <Slider defaultValue={40} onAfterChange = {this.optionsChange.bind(this, 'ranksep')} />\n          </div>\n        </div>\n        <div className=\"flow-canvas\" id=\"dag-canvas\">\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<DagreLayout />, document.getElementById('root'));\n"
  },
  {
    "filename": "index.less",
    "code": "@import 'theme.less'; \n.dagreLayout-page{\n  width: 100%;\n  height: 100%;\n  position: relative;\n  .flow-canvas {\n    width: 100%;\n    height: 100%;\n  }\n  .point {\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    border: @butterfly-box-border;\n    cursor: pointer;\n  }\n  .point-1 {\n    top: 50px;\n    left: 300px;\n  }\n  .point-2 {\n    top: 300px;\n    left: 500px;\n  }\n  .operate-bar{\n    position: absolute;\n    top: 20px;\n    right: 20px;\n    z-index: 999;\n    box-shadow:@butterfly-box-shadow;\n    border:@butterfly-box-border;\n    border-radius: 4px;\n    padding: 10px;\n    background-color: @butterfly-theme-color;\n    color:@butterfly-normal-font-color;\n    .operate-bar-title{\n      height: 30px;\n      width: 100%;\n      line-height: 30px;\n      text-align: center;\n      background-color: @butterfly-primary-color;\n      color: @butterfly-overlay-font-color;\n      margin-bottom: 10px;\n    }\n    .operate-item{\n      margin-bottom: 10px;\n      .operate-node{\n        margin-right: 10px;\n        display: flex;\n        align-items: center;\n      }\n      \n      .ant-select-focused{\n        .ant-select-selection{\n          background-color: @butterfly-theme-color;\n          border: @butterfly-box-node-border-hover;\n          box-shadow:0 0 2px @butterfly-primary-color;\n        }\n      }\n      .ant-select-enabled{\n        .ant-select-selection{\n          background-color: @butterfly-theme-color;\n          color:@butterfly-normal-font-color;\n        }\n      }\n      .ant-btn{\n        background-color: @butterfly-theme-color;\n        color:@butterfly-normal-font-color;\n      }\n      .ant-btn:hover,.ant-btn:focus,.ant-select-selection:hover{\n        border: @butterfly-box-node-border-hover;\n        color: @butterfly-primary-color;\n      }\n      .ant-slider{\n        .ant-slider-track{\n          background-color: @butterfly-primary-color;\n        }\n        .ant-slider-handle{\n          border:2px solid @butterfly-primary-color;\n        }\n      }\n    }\n  }\n}\n\n.ant-select-dropdown{\n  border-radius: 0 0 10px 10px;  \n  overflow: hidden; \n  .ant-select-dropdown-menu-item-active:not(.ant-select-dropdown-menu-item-disabled){\n    background-color: @butterfly-box-move-background-color;\n  }\n    .ant-select-dropdown-menu,.ant-select-dropdown-menu-root,.ant-select-dropdown-menu-vertical{\n      li:hover{\n        background-color: @butterfly-box-move-background-color;\n      }\n      background-color: @butterfly-theme-color; \n    }\n    .ant-select-dropdown-menu-item-active{ \n      background-color: @butterfly-primary-color; \n    }\n}"
  },
  {
    "filename": "package.json",
    "code": "{\n  \"name\": \"dagre-layout\",\n  \"cn_name\": \"dagre布局\",\n  \"description\": \"a demo to show how to use dagre layout\",\n  \"cn_description\": \"dagre布局示例\",\n  \"dependencies\": {\n    \"butterfly-dag\": \"*\",\n    \"react\": \"^16.0.0\",\n    \"react-dom\": \"^16.0.0\",\n    \"jquery\": \"*\",\n    \"lodash\": \"*\",\n    \"antd\": \"^3.0.0\"\n  }\n}"
  },
  {
    "filename": "theme.less",
    "code": "@butterfly-theme-color-base:#fff;\n@butterfly-normal-font-color-base:#222;;\n@butterfly-overlay-font-color-base:#FFF;\n@butterfly-primary-color-base:#F66902;\n@butterfly-box-border-color-base: #D9D9D9;\n@butterfly-box-shadow-base:0 2px 3px 0 rgba(0,112,204,0.06);\n@butterfly-box-radius-base:100px;\n@butterfly-line-color-base: #BFBFBF;\n// 主题背景色（画布背景色）\n@butterfly-theme-background-color: @butterfly-theme-color-base;\n// （各图形框）普通情况背景色\n@butterfly-theme-color: fade(@butterfly-theme-color-base,80%);\n// 主题色\n@butterfly-primary-color: @butterfly-primary-color-base;\n// 普通情况下字体颜色\n@butterfly-normal-font-color: @butterfly-normal-font-color-base;\n// 主题背景色上的字体颜色及icon颜色\n@butterfly-overlay-font-color: @butterfly-overlay-font-color-base;\n// 拖动时的背景色\n@butterfly-box-move-background-color: fade(@butterfly-primary-color, 20%);\n// 边框的样式\n@butterfly-box-border: 1px solid @butterfly-box-border-color-base;\n@butterfly-box-shadow: @butterfly-box-shadow-base;\n@butterfly-box-radius: @butterfly-box-radius-base;\n@butterfly-box-node-border-hover: 1px solid @butterfly-primary-color;\n// 线条样式\n@butterfly-line-color: @butterfly-line-color-base;"
  }
]