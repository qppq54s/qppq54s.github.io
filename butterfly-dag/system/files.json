[
  {
    "filename": "data.js",
    "code": "import BaseGroup from './group';\nimport BaseNode from './node';\nimport BaseEdge from './edge';\nimport BaseEndpoint from './endpoint';\n\nexport default {\n  nodes: [{\n    id: '0',\n    top: 160,\n    left: 40,\n    width: 80,\n    height: 80,\n    border: 'solid',\n    text: 'ATOMIC',\n    Class: BaseNode,\n    endpoints: [{\n      id: 'right',\n      orientation: [1, 0],\n      pos: [0, 0.5],\n      Class: BaseEndpoint\n    }]\n  }, {\n    id: '1',\n    top: 200,\n    left: 120,\n    width: 80,\n    height: 80,\n    group: 'group_1',\n    border: 'dashed',\n    text: 'ATOMIC',\n    Class: BaseNode,\n    endpoints: [{\n      id: 'left',\n      orientation: [-1, 0],\n      pos: [0, 0.5],\n      Class: BaseEndpoint\n    }, {\n      id: 'right_1',\n      orientation: [1, 0],\n      pos: [0, 0.33],\n      Class: BaseEndpoint\n    }, {\n      id: 'right_2',\n      orientation: [1, 0],\n      pos: [0, 0.66],\n      Class: BaseEndpoint\n    }]\n  }, {\n    id: '2',\n    top: 50,\n    left: 650,\n    width: 100,\n    height: 300,\n    border: 'solid',\n    text: 'ATOMIC',\n    Class: BaseNode,\n    endpoints: [{\n      id: 'left_1',\n      orientation: [-1, 0],\n      pos: [0, 0.33],\n      Class: BaseEndpoint\n    }, {\n      id: 'left_2',\n      orientation: [-1, 0],\n      pos: [0, 0.66],\n      Class: BaseEndpoint\n    }]\n  }],\n  groups: [{\n    id: 'group_1',\n    top: 50,\n    left: 220,\n    text: 'COUPLED',\n    Class: BaseGroup,\n    endpoints: [{\n      id: 'left',\n      orientation: [-1, 0],\n      pos: [0, 0.5],\n      Class: BaseEndpoint\n    }, {\n      id: 'right_1',\n      orientation: [1, 0],\n      pos: [0, 0.33],\n      Class: BaseEndpoint\n    }, {\n      id: 'right_2',\n      orientation: [1, 0],\n      pos: [0, 0.66],\n      Class: BaseEndpoint\n    }]\n  }],\n  edges: [{\n    source: 'right',\n    target: 'left',\n    sourceNode: '0',\n    targetNode: 'group_1',\n    type: 'endpoint',\n    label: ['IN', 'OUT'],\n    Class: BaseEdge\n  }, {\n    source: 'left',\n    target: 'left',\n    sourceNode: 'group_1',\n    targetNode: '1',\n    type: 'endpoint',\n    label: [undefined, 'XY'],\n    Class: BaseEdge\n  }, {\n    source: 'right_1',\n    target: 'right_1',\n    sourceNode: '1',\n    targetNode: 'group_1',\n    type: 'endpoint',\n    label: ['X', 'OUT1'],\n    Class: BaseEdge\n  }, {\n    source: 'right_2',\n    target: 'right_2',\n    sourceNode: '1',\n    targetNode: 'group_1',\n    type: 'endpoint',\n    label: ['Y', 'OUT2'],\n    Class: BaseEdge\n  }, {\n    source: 'right_1',\n    target: 'left_1',\n    sourceNode: 'group_1',\n    targetNode: '2',\n    type: 'endpoint',\n    label: [undefined, 'A'],\n    Class: BaseEdge\n  }, {\n    source: 'right_2',\n    target: 'left_2',\n    sourceNode: 'group_1',\n    targetNode: '2',\n    type: 'endpoint',\n    label: [undefined, 'B'],\n    Class: BaseEdge\n  }]\n};\n"
  },
  {
    "filename": "edge.js",
    "code": "import {Edge} from 'butterfly-dag';\nimport $ from 'jquery';\n\nclass BaseEdge extends Edge {\n  draw(obj) {\n    let path = super.draw(obj);\n    $(path).addClass('base-link');\n    return path;\n  }\n  // 随时定制label的位置和样式\n  redrawLabel() {\n    if (this._labelDom0) {\n      let beginPoint = this.dom.getPointAtLength(0);\n      $(this._labelDom0)\n        .css('left', beginPoint.x - this._labelDom0.offsetWidth / 2 + 20)\n        .css('top', beginPoint.y - this._labelDom0.offsetHeight / 2 + 20);\n    }\n    if (this._labelDom1) {\n      let pathLength = this.dom.getTotalLength();\n      let endPoint = this.dom.getPointAtLength(pathLength);\n      $(this._labelDom1)\n        .css('left', endPoint.x - this._labelDom1.offsetWidth / 2 - 20)\n        .css('top', endPoint.y - this._labelDom1.offsetHeight / 2 + 20);\n    }\n  }\n  drawLabel(texts) {\n    let dom = null;\n    if (texts) {\n      dom = document.createDocumentFragment();\n      let inText = texts[0];\n      let outText = texts[1];\n      if (inText) {\n        let dom0 = $(`<span class=\"in-label label\">${inText}</span>`)[0];\n        dom.append(dom0);\n        this._labelDom0 = dom0;\n      }\n      if (outText) {\n        let dom1 = $(`<span class=\"out-label label\">${outText}</span>`)[0];\n        dom.append(dom1);\n        this._labelDom1 = dom1;\n      }\n    }\n    return dom;\n  }\n}\n\nexport default BaseEdge;\n"
  },
  {
    "filename": "endpoint.js",
    "code": "import {Endpoint, Tips} from 'butterfly-dag';\nimport $ from 'jquery';\n\nclass BaseEndpoint extends Endpoint {\n  mounted() {\n    Tips.createTip({\n      targetDom: this.dom,\n      genTipDom: (data) => {\n        return $('<div>this is a tips</div>')[0];\n      },\n      placement: 'top'\n    });\n  }\n  draw(obj) {\n    let point = super.draw(obj);\n    $(point).addClass('purple-point');\n    return point;\n  }\n}\n\nexport default BaseEndpoint;\n"
  },
  {
    "filename": "group.js",
    "code": "import {Group} from 'butterfly-dag';\nimport $ from 'jquery';\nimport _ from 'lodash';\n\nclass BaseGroup extends Group {\n  draw(obj) {\n    let _dom = obj.dom;\n    if (!_dom) {\n      _dom = $('<div></div>')\n        .attr('class', 'group')\n        .css('top', obj.top)\n        .css('left', obj.left)\n        .attr('id', obj.id);\n    }\n    let group = $(_dom);\n\n    this._container = $('<div></div>')\n      .attr('class', 'container');\n\n    group.append(this._container);\n\n    // 添加文字\n    if (_.get(obj, 'options.text')) {\n      group.append(`<span class=\"text\">${obj.options.text}</span>`);\n    }\n\n    return _dom;\n  }\n}\n\nexport default BaseGroup;\n"
  },
  {
    "filename": "index.jsx",
    "code": "import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport {Canvas} from 'butterfly-dag';\nimport mockData from './data';\nimport './index.less';\nimport 'butterfly-dag/dist/index.css';\n\nclass System extends Component {\n  constructor() {\n    super();\n  }\n  componentDidMount() {\n    let root = document.getElementById('dag-canvas');\n    this.canvas = new Canvas({\n      root: root,\n      disLinkable: true, // 可删除连线\n      linkable: true,    // 可连线\n      draggable: true,   // 可拖动\n      zoomable: true,    // 可放大\n      moveable: true,    // 可平移\n      theme: {\n        edge: {\n          shapeType: 'Straight'\n        }\n      }\n    });\n    this.canvas.draw(mockData);\n  }\n  render() {\n    return (\n      <div className='system-page'>\n        <div className=\"system-canvas\" id=\"dag-canvas\">\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<System />, document.getElementById('root'));\n\n"
  },
  {
    "filename": "index.less",
    "code": "@import 'theme.less'; \n.system-page {\n  width: 100%;\n  height: 100%;\n  .system-canvas {\n    width: 100%;\n    height: 100%;\n    .group {\n      width: 300px;\n      height: 300px;\n      .container {\n        width: 100%;\n        height: 100%;\n        border-radius: 5px;\n        border: 1px solid #66cdc5;\n        background: @butterfly-theme-color;\n      }\n    }\n    .system-base-node {\n      position: absolute;\n      padding: 0;\n      border-width: 1px;\n      border-color: #f4b871;\n      text-align: center;\n      background: @butterfly-theme-color;\n      vertical-align: middle;\n      border-radius: 5px;\n    }\n    .base-link {\n      stroke: #4b4f6b;\n      stroke-width: 1px;\n    }\n    .group {\n      > .text {\n        position: absolute;\n        top: 20px;\n        left: 108px;\n        width: 100px;\n      }\n    }\n    .label {\n      position: absolute;\n      color: @butterfly-normal-font-color;\n      font-size: 12px;\n    }\n    .label:hover {\n      background: @butterfly-primary-color;\n      color: @butterfly-overlay-font-color;\n    }\n    .text {\n      display: inline-block;\n      text-align: center;\n      color: @butterfly-normal-font-color;\n      width: 100%;\n      padding-top: 5px;\n    }\n    .dashed {\n      border-style: dashed;\n    }\n    .solid {\n      border-style: solid;\n    }\n    .purple-point {\n      border: 1px solid #fff;\n      background: #776ef3;\n      width: 10px;\n      height: 10px;\n    }\n  }\n}"
  },
  {
    "filename": "node.js",
    "code": "import {Node, Tips} from 'butterfly-dag';\nimport $ from 'jquery';\n\nclass BaseNode extends Node {\n  constructor(opts) {\n    super(opts);\n  }\n  mounted() {\n    Tips.createMenu({\n      targetDom: this.dom,\n      genTipDom: (data) => {\n        return $('<div>this is a menu</div>')[0];\n      },\n      placement: 'right',\n      closable: true\n    });\n  }\n  draw = (data) => {\n    let container = $('<div class=\"system-base-node\"></div>')\n      .css('top', data.top)\n      .css('left', data.left)\n      .css('width', data.options.width)\n      .css('height', data.options.height)\n      .attr('id', data.id);\n\n    // 添加外框\n    if (data.options.border) {\n      container.addClass(data.options.border);\n    }\n    // 添加文字\n    container.append(`<span class=\"text\">${data.options.text}</span>`);\n\n    return container[0];\n  }\n}\n\nexport default BaseNode;\n"
  },
  {
    "filename": "package.json",
    "code": "{\n  \"name\": \"system\",\n  \"cn_name\": \"系统数据流图\",\n  \"description\": \"a dag to show system data flow\",\n  \"cn_description\": \"用于描述系统数据流的DAG图\",\n  \"dependencies\": {\n    \"butterfly-dag\": \"*\",\n    \"react\": \"^16.0.0\",\n    \"react-dom\": \"^16.0.0\",\n    \"jquery\": \"*\",\n    \"lodash\": \"*\"\n  }\n}"
  },
  {
    "filename": "theme.less",
    "code": "@butterfly-theme-color-base:#fff;\n@butterfly-normal-font-color-base:#222;;\n@butterfly-overlay-font-color-base:#FFF;\n@butterfly-primary-color-base:#F66902;\n@butterfly-box-border-color-base: #D9D9D9;\n@butterfly-box-shadow-base:0 2px 3px 0 rgba(0,112,204,0.06);\n@butterfly-box-radius-base:100px;\n@butterfly-line-color-base: #BFBFBF;\n// 主题背景色（画布背景色）\n@butterfly-theme-background-color: @butterfly-theme-color-base;\n// （各图形框）普通情况背景色\n@butterfly-theme-color: fade(@butterfly-theme-color-base,80%);\n// 主题色\n@butterfly-primary-color: @butterfly-primary-color-base;\n// 普通情况下字体颜色\n@butterfly-normal-font-color: @butterfly-normal-font-color-base;\n// 主题背景色上的字体颜色及icon颜色\n@butterfly-overlay-font-color: @butterfly-overlay-font-color-base;\n// 拖动时的背景色\n@butterfly-box-move-background-color: fade(@butterfly-primary-color, 20%);\n// 边框的样式\n@butterfly-box-border: 1px solid @butterfly-box-border-color-base;\n@butterfly-box-shadow: @butterfly-box-shadow-base;\n@butterfly-box-radius: @butterfly-box-radius-base;\n@butterfly-box-node-border-hover: 1px solid @butterfly-primary-color;\n// 线条样式\n@butterfly-line-color: @butterfly-line-color-base;"
  }
]