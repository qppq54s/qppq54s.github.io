[
  {
    "filename": "custom.js",
    "code": "import React, {useEffect} from 'react';\nimport {Select} from 'antd';\nconst options = [\n  {value: '半年内企业经营异常记录数'},\n  {value: '大于 5'},\n  {value: '小于或等于 5'},\n  {value: '企业是否吊销'},\n  {value: '等于 否'},\n  {value: '赋值 xxx'},\n  {value: '等于 是'}\n];\nexport default ({node, canvas}) => {\n  return <div\n    className=\"custom-node\"\n  >\n    <span className=\"icon\" />\n    <span>\n      <Select defaultValue={node.text} options={options} onChange={() => {\n        setTimeout(() => {\n          canvas.redraw();\n        });\n      }} ></Select>\n    </span>\n  </div>;\n};\n"
  },
  {
    "filename": "index.jsx",
    "code": "import React, {Component} from 'react';\nimport ReactDom from 'react-dom';\nimport Custom from './custom.js';\nimport Node from './node.js';\nimport $ from 'jquery';\nimport {TreeCanvas} from 'butterfly-dag';\n\nimport './index.less';\nimport 'antd/dist/antd.css';\nimport 'butterfly-dag/dist/index.css';\n\n\nconst mockData = {\n  nodes: {\n    id: '0',\n    isRoot: true,\n    text: '半年内企业经营异常记录数',\n    color: 'green',\n    width: parseInt((Math.random() * 500)),\n    Class: Node,\n    endpoints: [{\n      id: 'left',\n      orientation: [-1, 0],\n      pos: [0, 0.5]\n    }, {\n      id: 'right',\n      orientation: [1, 0],\n      pos: [0, 0.5]\n    }],\n    children: [{\n      id: '1',\n      parentId: '0',\n      color: 'red',\n      text: '小于或等于 5',\n      width: parseInt((Math.random() * 500)),\n      Class: Node,\n      endpoints: [{\n        id: 'left',\n        orientation: [-1, 0],\n        pos: [0, 0.5]\n      }, {\n        id: 'right',\n        orientation: [1, 0],\n        pos: [0, 0.5]\n      }],\n      children: [{\n        id: '3',\n        color: 'green',\n        text: '企业是否吊销',\n        width: parseInt((Math.random() * 500)),\n        Class: Node,\n        endpoints: [{\n          id: 'left',\n          orientation: [-1, 0],\n          pos: [0, 0.5]\n        }, {\n          id: 'right',\n          orientation: [1, 0],\n          pos: [0, 0.5]\n        }],\n        children: [{\n          id: '4',\n          color: 'red',\n          text: '等于 是',\n          width: parseInt((Math.random() * 500)),\n          Class: Node,\n          endpoints: [{\n            id: 'left',\n            orientation: [-1, 0],\n            pos: [0, 0.5]\n          }, {\n            id: 'right',\n            orientation: [1, 0],\n            pos: [0, 0.5]\n          }],\n          children: [{\n            id: '6',\n            color: 'blue',\n            text: '赋值 xxx',\n            width: parseInt((Math.random() * 500)),\n            Class: Node,\n            endpoints: [{\n              id: 'left',\n              orientation: [-1, 0],\n              pos: [0, 0.5]\n            }, {\n              id: 'right',\n              orientation: [1, 0],\n              pos: [0, 0.5]\n            }],\n          }]\n        }, {\n          id: '5',\n          color: 'red',\n          text: '等于 否',\n          width: parseInt((Math.random() * 500)),\n          Class: Node,\n          endpoints: [{\n            id: 'left',\n            orientation: [-1, 0],\n            pos: [0, 0.5]\n          }, {\n            id: 'right',\n            orientation: [1, 0],\n            pos: [0, 0.5]\n          }],\n          children: [{\n            id: '7',\n            color: 'blue',\n            text: '赋值 xxx',\n            width: parseInt((Math.random() * 500)),\n            Class: Node,\n            endpoints: [{\n              id: 'left',\n              orientation: [-1, 0],\n              pos: [0, 0.5]\n            }, {\n              id: 'right',\n              orientation: [1, 0],\n              pos: [0, 0.5]\n            }],\n          }]\n        }]\n      }]\n    }, {\n      id: '2',\n      parentId: '0',\n      color: 'red',\n      text: '大于 5',\n      width: parseInt((Math.random() * 500)),\n      Class: Node,\n      endpoints: [{\n        id: 'left',\n        orientation: [-1, 0],\n        pos: [0, 0.5]\n      }, {\n        id: 'right',\n        orientation: [1, 0],\n        pos: [0, 0.5]\n      }],\n      children: [{\n        id: '8',\n        color: 'blue',\n        text: '赋值 xxx',\n        width: parseInt((Math.random() * 500)),\n        Class: Node,\n        endpoints: [{\n          id: 'left',\n          orientation: [-1, 0],\n          pos: [0, 0.5]\n        }, {\n          id: 'right',\n          orientation: [1, 0],\n          pos: [0, 0.5]\n        }],\n      }]\n    }]\n  },\n  edges: [{\n    id: '0',\n    source: 'right',\n    target: 'left',\n    sourceNode: '0',\n    targetNode: '1',\n    type: 'endpoint'\n  }, {\n    id: '1',\n    source: 'right',\n    target: 'left',\n    sourceNode: '0',\n    targetNode: '2',\n    type: 'endpoint'\n  }, {\n    id: '2',\n    source: 'right',\n    target: 'left',\n    sourceNode: '1',\n    targetNode: '3',\n    type: 'endpoint'\n  }, {\n    id: '3',\n    source: 'right',\n    target: 'left',\n    sourceNode: '3',\n    targetNode: '4',\n    type: 'endpoint'\n  }, {\n    id: '4',\n    source: 'right',\n    target: 'left',\n    sourceNode: '3',\n    targetNode: '5',\n    type: 'endpoint'\n  }, {\n    id: '5',\n    source: 'right',\n    target: 'left',\n    sourceNode: '4',\n    targetNode: '6',\n    type: 'endpoint'\n  }, {\n    id: '6',\n    source: 'right',\n    target: 'left',\n    sourceNode: '5',\n    targetNode: '7',\n    type: 'endpoint'\n  }, {\n    id: '6',\n    source: 'right',\n    target: 'left',\n    sourceNode: '2',\n    targetNode: '8',\n    type: 'endpoint'\n  }]\n};\nconst nodesRender = (nodes) => (cb) => {\n  const nodelist = [];\n  const loop = (list) => {\n    list.forEach(node => {\n      nodelist.push(node);\n      if (node?.children?.length > 0) {\n        loop(node.children);\n      }\n    });\n  };\n  if (cb && typeof cb === 'function') {\n    loop(nodes && [nodes] || []);\n    return nodelist.map(cb);\n  }\n};\nclass CompactBoxTree extends Component {\n  constructor() {\n    super();\n  }\n  state = {\n    data: {},\n  }\n  componentDidMount() {\n    let root = document.getElementById('dag-canvas');\n    let that = this;\n    this.canvas = new TreeCanvas({\n      root: root,\n      disLinkable: true, // 可删除连线\n      linkable: true,    // 可连线\n      draggable: false,   // 可拖动\n      zoomable: true,    // 可放大\n      moveable: true,    // 可平移\n      theme: {\n        edge: {\n          type: 'AdvancedBezier',\n          arrow: true\n        }\n      },\n      layout: {\n        type: 'compactBox',\n        options: {\n          direction: 'LR',\n          getHeight(d) {\n            return 60;\n          },\n          getWidth(d) {\n            // console.log(d);\n            // console.log(this);\n            let node = that.canvas.getNode(d.id);\n            if (node) {\n              return $(node.dom).width();\n            } else {\n              return 100;\n            }\n            // return 180;\n          },\n          getHGap(d) {\n            return 60;\n          },\n          getVGap(d) {\n            return 20;\n          },\n        }\n      }\n    });\n    this.canvas.draw(mockData, {}, () => {\n      this.setState({\n        data: mockData\n      }, () => {\n        this.canvas.focusCenterWithAnimate();\n        this.canvas.redraw();\n      });\n    });\n    let _tmpNum = 100;\n    this.canvas.on('events', (data) => {\n      if (data.type === 'custom:addSubNode') {\n        // addNode，removeNode可以还需要重写下\n        this.canvas.addNode({\n          id: _tmpNum.toString(),\n          text: `我是id为${_tmpNum}的节点`,\n          parent: data.data.parent,\n          Class: Node,\n          endpoints: [{\n            id: 'left',\n            orientation: [-1, 0],\n            pos: [0, 0.5]\n          }, {\n            id: 'right',\n            orientation: [1, 0],\n            pos: [0, 0.5]\n          }],\n        });\n        this.canvas.addEdge({\n          id: this.canvas.edges.length.toString(),\n          source: 'right',\n          target: 'left',\n          sourceNode: data.data.parent,\n          targetNode: (_tmpNum++).toString(),\n          type: 'endpoint'\n        });\n        this.canvas.redraw();\n      }\n    });\n  }\n  render() {\n    return (\n      <div className='ruleTree-page'>\n        {\n          nodesRender(this.state.data.nodes)(\n            node => {\n              const div = document.getElementById(node.id);\n              if (!div) {\n                return null;\n              }\n              return ReactDom.createPortal(\n                <Custom key={node.id} node={node} canvas={this.canvas} />,\n                div\n              );\n            }\n          )\n        }\n        <div className=\"ruleTree-canvas\" id=\"dag-canvas\" />\n      </div>\n    );\n  }\n}\n\nReactDom.render(<CompactBoxTree />, document.getElementById('root'));\n\n"
  },
  {
    "filename": "index.less",
    "code": "@import 'theme.less'; \n.ruleTree-page {\n  width: 100%;\n  height: 100%;\n  .ruleTree-canvas {\n    width: 100%;\n    height: 100%;\n  }\n}"
  },
  {
    "filename": "node.js",
    "code": "import {TreeNode} from 'butterfly-dag';\nimport $ from 'jquery';\nimport './node.less';\n\nclass BaseNode extends TreeNode {\n  constructor(opts) {\n    super(opts);\n    this.addIcon = null;\n    this.expandBtn = null;\n  }\n  draw(opts) {\n    let container = $('<div class=\"rule-node\"></div>')\n      .css('top', opts.top + 'px')\n      .css('left', opts.left + 'px')\n      .attr('id', opts.id);\n\n    this._attachEvent();\n    return container[0];\n  }\n  _addEventListener() {\n    // todo 做事件代理的形式\n    $(this.dom).on('mousedown', (e) => {\n      const LEFT_KEY = 0;\n      if (e.button !== LEFT_KEY) {\n        return;\n      }\n      if (this.draggable) {\n        this._isMoving = true;\n        this.emit('InnerEvents', {\n          type: 'node:dragBegin',\n          data: this\n        });\n      } else {\n        // 单纯为了抛错事件给canvas，为了让canvas的dragtype不为空，不会触发canvas:click事件\n        this.emit('InnerEvents', {\n          type: 'node:mouseDown',\n          data: this\n        });\n      }\n    });\n  }\n  _attachEvent() {\n    $(this.expandBtn).on('click', (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n      if (this.collapsed) {\n        // 可以在这里向后端请求数据,把node穿进去expand里面\n        this.expand();\n      } else {\n        this.collapse();\n      }\n    });\n\n    $(this.addIcon).on('click', (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n      this.emit('events', {\n        type: 'custom:addSubNode',\n        data: {\n          parent: this.id\n        }\n      });\n    });\n  }\n}\n\nexport default BaseNode;\n"
  },
  {
    "filename": "node.less",
    "code": "@import 'theme.less'; \n.ruleTree-canvas {\n  .rule-node {\n    position: absolute;\n    height: 35px;\n    .text {\n      display: inline-block;\n      white-space:nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      vertical-align: middle;\n    }\n    .iconfont {\n      cursor: pointer;\n    }\n    .custom-node{\n      .ant-select{\n        color: @butterfly-normal-font-color;\n          .ant-select-selection{\n            border:@butterfly-box-border;\n            background-color: @butterfly-theme-color;\n          }\n        }\n        .ant-select-focused{\n          .ant-select-selection{\n              background-color: @butterfly-theme-color;\n              border: @butterfly-box-node-border-hover;\n              box-shadow:0 0 2px @butterfly-primary-color;\n            }\n        }\n          .ant-select-selection:hover{\n            border: @butterfly-box-node-border-hover;\n            color: @butterfly-primary-color;\n          }\n      }\n  }\n}\n.ant-select-dropdown{\n  border-radius: 0 0 10px 10px;  \n  overflow: hidden; \n  .ant-select-dropdown-menu-item-active:not(.ant-select-dropdown-menu-item-disabled){\n    background-color: @butterfly-box-move-background-color;\n  }\n    .ant-select-dropdown-menu,.ant-select-dropdown-menu-root,.ant-select-dropdown-menu-vertical{\n      li:hover{\n        background-color: @butterfly-box-move-background-color;\n      }\n      background-color: @butterfly-theme-color; \n    }\n    .ant-select-dropdown-menu-item-active{ \n      background-color: @butterfly-primary-color; \n    }\n}\n"
  },
  {
    "filename": "package.json",
    "code": "{\n  \"name\": \"rule-tree\",\n  \"cn_name\": \"规则树\",\n  \"description\": \"a dag to show to how to make a rule-tree\",\n  \"cn_description\": \"一个规则树\",\n  \"dependencies\": {\n    \"butterfly-dag\": \"*\",\n    \"react\": \"^16.0.0\",\n    \"react-dom\": \"^16.0.0\",\n    \"jquery\": \"*\",\n    \"lodash\": \"*\",\n    \"antd\": \"^3.0.0\"\n  }\n}"
  },
  {
    "filename": "theme.less",
    "code": "@butterfly-theme-color-base:#fff;\n@butterfly-normal-font-color-base:#222;;\n@butterfly-overlay-font-color-base:#FFF;\n@butterfly-primary-color-base:#F66902;\n@butterfly-box-border-color-base: #D9D9D9;\n@butterfly-box-shadow-base:0 2px 3px 0 rgba(0,112,204,0.06);\n@butterfly-box-radius-base:100px;\n@butterfly-line-color-base: #BFBFBF;\n// 主题背景色（画布背景色）\n@butterfly-theme-background-color: @butterfly-theme-color-base;\n// （各图形框）普通情况背景色\n@butterfly-theme-color: fade(@butterfly-theme-color-base,80%);\n// 主题色\n@butterfly-primary-color: @butterfly-primary-color-base;\n// 普通情况下字体颜色\n@butterfly-normal-font-color: @butterfly-normal-font-color-base;\n// 主题背景色上的字体颜色及icon颜色\n@butterfly-overlay-font-color: @butterfly-overlay-font-color-base;\n// 拖动时的背景色\n@butterfly-box-move-background-color: fade(@butterfly-primary-color, 20%);\n// 边框的样式\n@butterfly-box-border: 1px solid @butterfly-box-border-color-base;\n@butterfly-box-shadow: @butterfly-box-shadow-base;\n@butterfly-box-radius: @butterfly-box-radius-base;\n@butterfly-box-node-border-hover: 1px solid @butterfly-primary-color;\n// 线条样式\n@butterfly-line-color: @butterfly-line-color-base;"
  }
]